;;;; Task 1 for day 3 of Advent of Code

;;; First of, import input ready for usage
(ext:cd *load-truename*)
(load "input.lisp")

(load "../quicklisp/setup.lisp")

(ql:quickload :cl-ppcre :silent T)

(defvar *treesFirst* 0)
(defvar *treesSecond* 0)
(defvar *treesThird* 0)
(defvar *TreesFourth* 0)
(defvar *treesFifth* 0)
(defvar *coordinateXFirst* 0)
(defvar *coordinateXSecond* 0)
(defvar *coordinateXThird* 0)
(defvar *coordinateXFourth* 0)
(defvar *coordinateXFifth* 0)
(defvar *coordinateYFirst* 0)
(defvar *coordinateYSecond* 0)
(defvar *coordinateYThird* 0)
(defvar *coordinateYFourth* 0)
(defvar *coordinateYFifth* 0)
(defvar *repeats* 1)
(defvar *repeatedline* "")
(defparameter *splitline* '())
(defvar *line* "")
(dotimes (x (length *input*))
    (setf *line* (nth x *input*))
    (setf *repeatedline* "")
    (if (> *coordinateXFourth* (length *line*))
        (setf *repeats* (ceiling (/ *coordinateXFourth* (length *line*)))))
    (if (> *coordinateXFourth* (length *repeatedline*))
        (setf *repeats* (+ 1 *repeats*))) ; ensure repeats is high enough to avoid nil results
    (dotimes (repeat *repeats*)
        (setf *repeatedline* (concatenate 'string *repeatedline* *line*)))
    (setf *splitline* (cl-ppcre:split "" *repeatedline*))
    (if (string-equal (nth *coordinateXFirst* *splitline*) "#")
        (setf *treesFirst* (+ 1 *treesFirst*)))
    (if (string-equal (nth *coordinateXSecond* *splitline*) "#")
        (setf *treesSecond* (+ 1 *treesSecond*)))
    (if (string-equal (nth *coordinateXThird* *splitline*) "#")
        (setf *treesThird* (+ 1 *treesThird*)))
    (if (string-equal (nth *coordinateXFourth* *splitline*) "#")
        (setf *TreesFourth* (+ 1 *TreesFourth*)))
    (if (and (string-equal (nth *coordinateXFifth* *splitline*) "#") (= x *coordinateYFifth*))
        (setf *treesFifth* (+ 1 *treesFifth*)))
    (setf *coordinateXFirst* (+ 1 *coordinateXFirst*))
    (setf *coordinateXSecond* (+ 3 *coordinateXSecond*))
    (setf *coordinateXThird* (+ 5 *coordinateXThird*))
    (setf *coordinateXFourth* (+ 7 *coordinateXFourth*))
    (setf *coordinateYFirst* (+ 1 *coordinateYFirst*))
    (setf *coordinateYSecond* (+ 1 *coordinateYSecond*))
    (setf *coordinateYThird* (+ 1 *coordinateYThird*))
    (setf *coordinateYFourth* (+ 1 *coordinateYFourth*))
    (if (= x *coordinateYFifth*)
        (progn
            (setf *coordinateXFifth* (+ 1 *coordinateXFifth*))
            (setf *coordinateYFifth* (+ 2 *coordinateYFifth*)))))

(format t "Answer to part two: ~d ~%" (* *treesFirst* *treesSecond* *treesThird* *treesFourth* *treesFifth*))